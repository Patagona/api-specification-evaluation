/**
 * patagona-scheduler
 * This API wraps the [dKron](https://dkron.io/v1.2/api/#/) scheduling service and provides an easier interface/isolation.  **Note:** The actions which can be scheduled on a specific component are defined in the `patagona-scheduler`. Scheduling actions unknown to the `patagona-scheduler` will result in errors. 
 *
 * OpenAPI spec version: 1.0.0
 * Contact: apiteam@swagger.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.wordnik.client.api

import de.patagona.scheduler.generated.model.Execution
import de.patagona.scheduler.generated.model.Job

import java.io.File

import org.scalatra.{ TypedParamSupport, ScalatraServlet }
import org.scalatra.swagger._
import org.json4s._
import org.json4s.JsonDSL._
import org.scalatra.json.{ JValueResult, JacksonJsonSupport }
import org.scalatra.servlet.{FileUploadSupport, MultipartConfig, SizeConstraintExceededException}

import scala.collection.JavaConverters._

class DefaultApi (implicit val swagger: Swagger) extends ScalatraServlet
    with FileUploadSupport
    with JacksonJsonSupport
    with SwaggerSupport {
  protected implicit val jsonFormats: Formats = DefaultFormats

  protected val applicationDescription: String = "DefaultApi"
  override protected val applicationName: Option[String] = Some("//Default")

  before() {
    contentType = formats("json")
    response.headers += ("Access-Control-Allow-Origin" -> "*")
  }
  

  val v1ContractsContractSidJobsGetOperation = (apiOperation[List[Job]]("v1ContractsContractSidJobsGet")
      summary "Get all jobs of contract"
      parameters(pathParam[String]("contractSid").description(""), queryParam[String]("component").description("").optional, queryParam[String]("action").description("").optional)
  )

  get("/v1/contracts/:contractSid/jobs",operation(v1ContractsContractSidJobsGetOperation)) {
    
    
      val contractSid = params.getOrElse("contractSid", halt(400))
    
    println("contractSid: " + contractSid)
    
    
                val component = params.getAs[String]("component")

    println("component: " + component)
    
    
                val action = params.getAs[String]("action")

    println("action: " + action)
  }

  

  val v1ContractsContractSidJobsPostOperation = (apiOperation[Job]("v1ContractsContractSidJobsPost")
      summary "Create a job"
      parameters(pathParam[String]("contractSid").description(""), bodyParam[Job]("body").description("").optional)
  )

  post("/v1/contracts/:contractSid/jobs",operation(v1ContractsContractSidJobsPostOperation)) {
    
    
      val contractSid = params.getOrElse("contractSid", halt(400))
    
    println("contractSid: " + contractSid)
    
    
          val body = parsedBody.extract[Job]

    println("body: " + body)
  }

  

  val v1ContractsContractSidJobsUuidDeleteOperation = (apiOperation[Job]("v1ContractsContractSidJobsUuidDelete")
      summary "Delete job"
      parameters(pathParam[String]("contractSid").description(""), pathParam[String]("uuid").description(""))
  )

  delete("/v1/contracts/:contractSid/jobs/:uuid",operation(v1ContractsContractSidJobsUuidDeleteOperation)) {
    
    
      val contractSid = params.getOrElse("contractSid", halt(400))
    
    println("contractSid: " + contractSid)
    
    
      val uuid = params.getOrElse("uuid", halt(400))
    
    println("uuid: " + uuid)
  }

  

  val v1ContractsContractSidJobsUuidExecutionsGetOperation = (apiOperation[List[Execution]]("v1ContractsContractSidJobsUuidExecutionsGet")
      summary "Get executions of job"
      parameters(pathParam[String]("contractSid").description(""), pathParam[String]("uuid").description(""))
  )

  get("/v1/contracts/:contractSid/jobs/:uuid/executions",operation(v1ContractsContractSidJobsUuidExecutionsGetOperation)) {
    
    
      val contractSid = params.getOrElse("contractSid", halt(400))
    
    println("contractSid: " + contractSid)
    
    
      val uuid = params.getOrElse("uuid", halt(400))
    
    println("uuid: " + uuid)
  }

  

  val v1ContractsContractSidJobsUuidPutOperation = (apiOperation[List[Job]]("v1ContractsContractSidJobsUuidPut")
      summary "Update a job"
      parameters(pathParam[String]("contractSid").description(""), pathParam[String]("uuid").description(""), bodyParam[Job]("body").description("").optional)
  )

  put("/v1/contracts/:contractSid/jobs/:uuid",operation(v1ContractsContractSidJobsUuidPutOperation)) {
    
    
      val contractSid = params.getOrElse("contractSid", halt(400))
    
    println("contractSid: " + contractSid)
    
    
      val uuid = params.getOrElse("uuid", halt(400))
    
    println("uuid: " + uuid)
    
    
          val body = parsedBody.extract[Job]

    println("body: " + body)
  }

  

  val v1JobsGetOperation = (apiOperation[List[Job]]("v1JobsGet")
      summary "Get all jobs"
      parameters(queryParam[String]("component").description("").optional, queryParam[String]("action").description("").optional)
  )

  get("/v1/jobs",operation(v1JobsGetOperation)) {
    
    
                val component = params.getAs[String]("component")

    println("component: " + component)
    
    
                val action = params.getAs[String]("action")

    println("action: " + action)
  }

}
